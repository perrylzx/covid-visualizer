{"version":3,"sources":["components/CovidVisualizer.js","components/Introduction.js","App.js","serviceWorker.js","index.js"],"names":["unparsedCountryList","dateRange","caseRange","pathData","color","d3","margin","width","height","CovidVisualizer","props","parseTime","myRef","React","createRef","state","covidCases","selectedCountries","listOfCountries","firstCountrySelected","x","range","y","valueline","d","date","cases","domain","this","node","append","attr","yAxis","call","selectAll","data","enter","style","i","setState","eventkey","push","forEach","country","hasOwnProperty","length","countryData","Object","entries","key","value","datesToCases","drawChart","fetch","then","res","json","countryListSet","Set","countryListArray","current","id","ref","DropdownButton","onSelect","selectMultipleCountries","bind","title","map","Dropdown","Item","eventKey","Component","Introduction","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4UAMIA,G,OAAsB,IACtBC,EAAY,GACZC,EAAY,GACZC,EAAW,GACXC,EAAQC,IAERC,EAAgB,GAAhBA,EAA2B,GAA3BA,EAAuC,GAAvCA,EAAiD,GACnDC,EAAQ,IAAMD,EAAcA,EAC5BE,EAAS,IAAMF,EAAaA,EAMTG,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,UAAYN,IAAa,YAVvB,EAAKO,MAAQC,IAAMC,YACnB,EAAKC,MAAQ,CACXC,WAAY,GACZC,kBAAmB,GACnBC,gBAAiB,GACjBC,sBAAsB,GAPP,E,wDAgBjB,IAAIC,EAAIf,MAAegB,MAAM,CAAC,EAAGd,IAC7Be,EAAIjB,MAAiBgB,MAAM,CAACb,EAAQ,IAGlCe,EAAYlB,MAEfe,GAAE,SAACI,GACF,OAAOJ,EAAEI,EAAEC,SAEZH,GAAE,SAACE,GACF,OAAOF,EAAEE,EAAEE,WAGfN,EAAEO,OAAOtB,IAAUJ,IACnBqB,EAAEK,OAAO,CAAC,EAAGtB,IAAOH,MAEoB,IAApC0B,KAAKb,MAAMI,uBACbS,KAAKC,KAAOD,KAAKC,KACdC,OAAO,KACPC,KAAK,YAAa,aAAezB,EAAc,IAAMA,EAAa,KAGrEsB,KAAKI,MAAQJ,KAAKC,KAAKC,OAAO,KAAKG,KAAK5B,IAAYiB,IAGpDM,KAAKC,KACFC,OAAO,KACPC,KAAK,YAAa,eAAiBvB,EAAS,KAC5CyB,KAAK5B,IAAce,IAGPQ,KAAKC,KACjBK,UAAU,gBACVC,KAAKhC,GACLiC,QACAN,OAAO,KACPC,KAAK,QAAS,eAIdD,OAAO,QACPC,KAAK,QAAS,QACdA,KAAK,IAAKR,GACVc,MAAM,eAAgB,OACtBA,MAAM,UAAU,SAAUb,EAAGc,GAC5B,OAAOlC,EAAMkC,MAEdP,KAAK,OAAQ,UAGhBT,EAAEK,OAAO,CAAC,EAAGtB,IAAOH,KACpB0B,KAAKI,MAAMC,KAAK5B,IAAYiB,IAGbM,KAAKC,KACjBK,UAAU,gBACVC,KAAKhC,GACLiC,QACAN,OAAO,KACPC,KAAK,QAAS,eAGdD,OAAO,QACPK,KAAKhC,GACL4B,KAAK,QAAS,QACdA,KAAK,IAAKR,GACVc,MAAM,eAAgB,OACtBA,MAAM,UAAU,SAAUb,EAAGc,GAC5B,OAAOlC,EAAMkC,MAEdP,KAAK,OAAQ,SAElBH,KAAKW,SAAS,CAAEpB,sBAAsB,M,8CAIhBqB,GAAW,IAAD,OAChCZ,KAAKb,MAAME,kBAAkBwB,KAAKb,KAAKb,MAAMG,gBAAgBsB,IAC7DZ,KAAKb,MAAMC,WAAW0B,SAAQ,SAACC,GACzBA,EAAQC,eAAe,EAAK7B,MAAMG,gBAAgBsB,KACpDxC,EAAoByC,KAAKE,EAAQ,EAAK5B,MAAMG,gBAAgBsB,QAGhE,IAAK,IAAIF,EAAI,EAAGA,EAAItC,EAAoB6C,OAAQP,IAE9C,IADA,IAAIQ,EAAc,GAClB,MAAyBC,OAAOC,QAAQhD,EAAoBsC,IAA5D,eAAiE,CAAC,IAAD,sBAAvDW,EAAuD,KAAlDC,EAAkD,KAC/DD,EAAMrB,KAAKjB,UAAUsC,GACrBhD,EAAUwC,KAAKQ,GACf/C,EAAUuC,KAAKS,GACf,IAAMC,EAAe,CAAE1B,KAAMwB,EAAKvB,MAAOwB,GACzCJ,EAAYL,KAAKU,GAGrBhD,EAASsC,KAAKK,GACdlB,KAAKwB,c,+KAICC,MAAM,sDACTC,MAAK,SAACC,GACL,OAAOA,EAAIC,UAEZF,MAAK,SAACC,GAGL,IAAME,EAAiB,IAAIC,IAAIH,EAAI,IAC7BI,EAAgB,YAAOF,GAC7B,EAAKlB,SAAS,CACZvB,WAAYuC,EAAI,GAChBrC,gBAAiByC,O,OAIvB/B,KAAKC,KAAOxB,IACFuB,KAAKhB,MAAMgD,SAClB9B,OAAO,OACPO,MAAM,eAAgB,SACtBA,MAAM,eAAgB,OACtBN,KAAK,QAASxB,EAAQD,EAAcA,GACpCyB,KAAK,SAAUvB,EAASF,EAAaA,G,qIAIxC,OACE,yBAAKuD,GAAG,QAAQC,IAAKlC,KAAKhB,OACxB,kBAACmD,EAAA,EAAD,CACEF,GAAG,wBACHG,SAAUpC,KAAKqC,wBAAwBC,KAAKtC,MAC5CuC,MAAM,WAELvC,KAAKb,MAAMG,gBAAgBkD,KAAI,SAACzB,EAASL,GAAV,OAC9B,kBAAC+B,EAAA,EAASC,KAAV,CAAerB,IAAKX,EAAGiC,SAAUjC,GAC9BK,Y,GArJ8B9B,IAAM2D,WClB9BC,E,uKAEjB,OAAO,iF,GAF+B5D,IAAM2D,WCYjCE,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,OCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5a83dd2b.chunk.js","sourcesContent":["import * as d3 from \"d3\";\r\nimport React from \"react\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport \"./CovidVisualizer.css\";\r\n\r\nvar unparsedCountryList = [];\r\nvar dateRange = [];\r\nvar caseRange = [];\r\nvar pathData = [];\r\nvar color = d3.schemeCategory10;\r\n\r\nvar margin = { top: 20, right: 20, bottom: 30, left: 50 },\r\n  width = 960 - margin.left - margin.right,\r\n  height = 500 - margin.top - margin.bottom;\r\n\r\n// TODO(PERRY): make this drawchart function display new paths for each country selected from CounterSelector.js dropdown\r\n/* TODO(PERRY): there are multiple states for some countries, right now backend drops the state column and this component receives only selected countries and matches it to the first row from the dataset. eg;\r\n when you select china from the dropdown, it finds Anhui, China. fix this bug*/\r\n// TODO(PERRY)(bug): upon selecting a country, it calls the drawchart function which appends new paths, x and y axis every time. fix it so that selecting new countries merely updates the x and y axis with new domains and appends path properly\r\nexport default class CovidVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.myRef = React.createRef();\r\n    this.state = {\r\n      covidCases: [],\r\n      selectedCountries: [],\r\n      listOfCountries: [],\r\n      firstCountrySelected: false,\r\n    };\r\n  }\r\n  // format the data\r\n\r\n  parseTime = d3.timeParse(\"%m/%e/%y\");\r\n\r\n  drawChart() {\r\n    // set the ranges\r\n    var x = d3.scaleTime().range([0, width]);\r\n    var y = d3.scaleLinear().range([height, 0]);\r\n\r\n    // define the line\r\n    const valueline = d3\r\n      .line()\r\n      .x((d) => {\r\n        return x(d.date);\r\n      })\r\n      .y((d) => {\r\n        return y(d.cases);\r\n      });\r\n    // scale the range of the data\r\n    x.domain(d3.extent(dateRange));\r\n    y.domain([0, d3.max(caseRange)]);\r\n\r\n    if (this.state.firstCountrySelected === false) {\r\n      this.node = this.node\r\n        .append(\"g\")\r\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n      // Add the Y Axis\r\n      this.yAxis = this.node.append(\"g\").call(d3.axisLeft(y));\r\n\r\n      // Add the X Axis\r\n      this.node\r\n        .append(\"g\")\r\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n        .call(d3.axisBottom(x));\r\n\r\n      // adding a group element for each path\r\n      let dataPath = this.node\r\n        .selectAll(\".countryPath\")\r\n        .data(pathData)\r\n        .enter()\r\n        .append(\"g\")\r\n        .attr(\"class\", \"countryPath\");\r\n\r\n      // add the path\r\n      dataPath\r\n        .append(\"path\")\r\n        .attr(\"class\", \"line\")\r\n        .attr(\"d\", valueline)\r\n        .style(\"stroke-width\", \"2px\")\r\n        .style(\"stroke\", function (d, i) {\r\n          return color[i];\r\n        })\r\n        .attr(\"fill\", \"none\");\r\n    } else {\r\n      // updating the new max y axis\r\n      y.domain([0, d3.max(caseRange)]);\r\n      this.yAxis.call(d3.axisLeft(y));\r\n\r\n      // adding a group element for each path\r\n      let dataPath = this.node\r\n        .selectAll(\".countryPath\")\r\n        .data(pathData)\r\n        .enter()\r\n        .append(\"g\")\r\n        .attr(\"class\", \"countryPath\");\r\n      // add the path\r\n      dataPath\r\n        .append(\"path\")\r\n        .data(pathData)\r\n        .attr(\"class\", \"line\")\r\n        .attr(\"d\", valueline)\r\n        .style(\"stroke-width\", \"2px\")\r\n        .style(\"stroke\", function (d, i) {\r\n          return color[i];\r\n        })\r\n        .attr(\"fill\", \"none\");\r\n    }\r\n    this.setState({ firstCountrySelected: true });\r\n  }\r\n\r\n  // fetches the selected country from the dropdown and parses it for data\r\n  selectMultipleCountries(eventkey) {\r\n    this.state.selectedCountries.push(this.state.listOfCountries[eventkey]);\r\n    this.state.covidCases.forEach((country) => {\r\n      if (country.hasOwnProperty(this.state.listOfCountries[eventkey])) {\r\n        unparsedCountryList.push(country[this.state.listOfCountries[eventkey]]);\r\n      }\r\n    });\r\n    for (let i = 0; i < unparsedCountryList.length; i++) {\r\n      var countryData = [];\r\n      for (let [key, value] of Object.entries(unparsedCountryList[i])) {\r\n        key = this.parseTime(key);\r\n        dateRange.push(key);\r\n        caseRange.push(value);\r\n        const datesToCases = { date: key, cases: value };\r\n        countryData.push(datesToCases);\r\n      }\r\n    }\r\n    pathData.push(countryData);\r\n    this.drawChart();\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await fetch(\"https://arcane-plains-12569.herokuapp.com/download\")\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((res) => {\r\n        /*         temporary fix as i did not foresee multiple country data rows due to multiple states so for the time being i will remove duplicates from the list of countries.\r\n this will have a bug where the graph will display the path for the first row that matches the country from the dataset even when it has multiple states*/\r\n        const countryListSet = new Set(res[0]);\r\n        const countryListArray = [...countryListSet];\r\n        this.setState({\r\n          covidCases: res[1],\r\n          listOfCountries: countryListArray,\r\n        });\r\n      });\r\n    // appending svg to ref and a group element\r\n    this.node = d3\r\n      .select(this.myRef.current)\r\n      .append(\"svg\")\r\n      .style(\"border-style\", \"solid\")\r\n      .style(\"border-width\", \"1px\")\r\n      .attr(\"width\", width + margin.left + margin.right)\r\n      .attr(\"height\", height + margin.top + margin.bottom);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"graph\" ref={this.myRef}>\r\n        <DropdownButton\r\n          id=\"dropdown-basic-button\"\r\n          onSelect={this.selectMultipleCountries.bind(this)}\r\n          title=\"Country\"\r\n        >\r\n          {this.state.listOfCountries.map((country, i) => (\r\n            <Dropdown.Item key={i} eventKey={i}>\r\n              {country}\r\n            </Dropdown.Item>\r\n          ))}\r\n        </DropdownButton>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Introduction extends React.Component {\r\n  render() {\r\n    return <h3>Select the country to display Covid-19 growth</h3>;\r\n  }\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\nimport CovidVisualizer from \"./components/CovidVisualizer\";\r\nimport Introduction from \"./components/Introduction\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Introduction />\r\n      <CovidVisualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}